{"version":3,"sources":["Components/Portal/index.js","Components/Modal/Backdrop.js","Components/Modal/index.js","Components/WidgetModal/StepPanel.js","Components/WidgetModal/FirstStep.js","Components/WidgetModal/SecondStep.js","Components/WidgetModal/index.js","Components/AlertModal/index.js","Components/WidgetLists/List.js","Components/EmptyWidget/index.js","Components/WidgetLists/index.js","Store/index.js","WidgetOverview.js","serviceWorker.js","index.js"],"names":["Portal","forwardRef","props","ref","children","disablePortal","container","useState","monutedNode","setMountedNode","useEffect","ReactDOM","findDOMNode","getContainer","document","body","createPortal","proptypes","PropTypes","node","oneOfType","instanceOf","React","Component","func","bool","Backdrop","open","other","className","aria-hidden","Modal","onClose","onClick","event","target","currentTarget","StepPanel","value","index","classNames","classnames","hidden","aria-labelledby","languageList","english","germany","Bangla","Arabic","LanguageStep","onChange","language","widget","error","htmlFor","data-testid","name","Object","keys","map","key","i","SecondStep","type","id","placeholder","propTypes","addWidget","WidgetModal","setError","step","setStep","updateWidget","onChangeHandler","onNextStep","nextStep","preventDefault","FirstStep","AlertModal","onAction","message","onActionHandler","actionName","List","onDelete","onDeleteHandler","EmptyWidget","WidgetLists","widgets","length","getWidgets","storeItem","localStorage","getItem","JSON","parse","setWidgets","widgetList","setItem","stringify","insertItem","WidgetOverview","setOpen","deleteIndex","setDeleteIndex","_widgets","unshift","splice","Boolean","window","location","hostname","match","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.60760435.chunk.js","sourcesContent":["import React, { forwardRef, useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport ReactDOM from \"react-dom\";\n\nconst getContainer = (container) => {\n  container = typeof container === \"function\" ? container() : container;\n  return ReactDOM.findDOMNode(container);\n};\n\nconst Portal = forwardRef((props, ref) => {\n  const { children, disablePortal, container } = props;\n  const [monutedNode, setMountedNode] = useState(null);\n\n  useEffect(() => {\n    if (!disablePortal) {\n      setMountedNode(getContainer(container) || document.body);\n    }\n  }, [container, disablePortal]);\n\n  return monutedNode ? ReactDOM.createPortal(children, monutedNode) : monutedNode;\n});\n\nPortal.proptypes = {\n  children: PropTypes.node,\n  container: PropTypes.oneOfType([PropTypes.instanceOf(React.Component), PropTypes.func]),\n  disablePortal: PropTypes.bool,\n};\n\nexport default Portal;\n","import * as React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Backdrop = React.forwardRef((props, ref) => {\n  const { open, ...other } = props;\n  return open ? <div className={\"modal-backdrop\"} aria-hidden ref={ref} {...other} /> : null;\n});\n\nBackdrop.propTypes = {\n  open: PropTypes.bool.isRequired,\n};\n\nexport default Backdrop;\n","import React, { forwardRef } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Portal from \"../Portal\";\nimport Backdrop from \"./Backdrop\";\nimport \"../../css/modal.css\";\n\nconst Modal = forwardRef((props, ref) => {\n  const { children, open, onClose } = props;\n\n  const onBackdropHandler = (event) => {\n    if (event.target !== event.currentTarget) {\n      return;\n    }\n\n    if (onClose) {\n      onClose(event, \"backdropClick\");\n    }\n  };\n  if (!open) return null;\n  return (\n    <Portal>\n      <div className=\"modal-backspace\" ref={ref}>\n        <Backdrop open={open} onClick={onBackdropHandler} />\n        {children}\n      </div>\n    </Portal>\n  );\n});\n\nModal.propTypes = {\n  open: PropTypes.bool.isRequired,\n  onClose: PropTypes.func,\n  children: PropTypes.node,\n};\n\nexport default Modal;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\";\n\nconst StepPanel = (props) => {\n  const { children, value, index, className, ...other } = props;\n  const classNames = classnames(\"step-panel\", className);\n  return (\n    <div className={classNames} hidden={value !== index} aria-labelledby={`step-${index}`} {...other}>\n      {value === index && children}\n    </div>\n  );\n};\n\nStepPanel.propTypes = {\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  // Value for current panel\n  value: PropTypes.any,\n  // Index number of the panel\n  index: PropTypes.number,\n  // Classnames for this panel\n  className: PropTypes.string,\n};\n\nexport default StepPanel;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\";\n\nconst languageList = {\n  english: \"English\",\n  germany: \"Germany\",\n  Bangla: \"Bangla\",\n  Arabic: \"Arabic\",\n};\n\nconst LanguageStep = (props) => {\n  const {\n    onChange,\n    widget: { language },\n    error,\n  } = props;\n\n  const onChangeHandler = (event) => {\n    onChange(event.target.value, event);\n  };\n\n  let className = classnames(\"form-control\", { \"has-error\": error.language });\n\n  return (\n    <div className=\"widget-step step-1\">\n      <div className=\"form-group\">\n        <label htmlFor=\"selectLanguage\">Select Language</label>\n        <select data-testid=\"language-select\" name=\"language\" className={className} value={language} onChange={onChangeHandler}>\n          <option value=\"none\" data-testid=\"language-option-0\">\n            Select Language\n          </option>\n          {Object.keys(languageList).map((key, i) => {\n            return (\n              <option key={key} value={key} data-testid={`language-option-${i + 1}`}>\n                {languageList[key]}\n              </option>\n            );\n          })}\n        </select>\n        {error.language && <p className=\"error-message\">{error.language}</p>}\n      </div>\n    </div>\n  );\n};\n\nLanguageStep.propTypes = {\n  /**\n   * onChange function for get changed values\n   */\n  onChange: PropTypes.func.isRequired,\n  // widget data has all values (ex: name, language)\n  widget: PropTypes.object,\n  // Errors if any occurd\n  error: PropTypes.object,\n};\n\nexport default LanguageStep;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\";\n\nconst SecondStep = (props) => {\n  const {\n    onChange,\n    widget: { name },\n    error,\n  } = props;\n\n  const onChangeHandler = (event) => {\n    onChange(event.target.value, event);\n  };\n\n  let className = classnames(\"form-control\", { \"has-error\": error.language });\n\n  return (\n    <div className=\"widget-step step-2\">\n      <div className=\"form-group\">\n        <label htmlFor=\"selectName\">Name</label>\n        <input onChange={onChangeHandler} type=\"text\" name=\"name\" id=\"selectName\" value={name} placeholder=\"Type widget name\" className={className} />\n        {error.name && <p className=\"error-message\">{error.name}</p>}\n      </div>\n    </div>\n  );\n};\n\nSecondStep.propTypes = {\n  /**\n   * onChange function for get changed values\n   */\n  onChange: PropTypes.func.isRequired,\n  // widget data has all values (ex: name, language)\n  widget: PropTypes.object,\n  // Errors if any occurd\n  error: PropTypes.object,\n};\n\nexport default SecondStep;\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport StepPanel from \"./StepPanel\";\nimport FirstStep from \"./FirstStep\";\nimport SecondStep from \"./SecondStep\";\n\nconst WidgetModal = (props) => {\n  const { onClose, addWidget } = props;\n  const [error, setError] = useState({});\n  const [step, setStep] = useState(1);\n  const [widget, updateWidget] = useState({ name: \"\", language: \"none\" });\n\n  const onCloseModal = (event) => {\n    event.preventDefault();\n    if (onClose) {\n      onClose();\n    }\n  };\n\n  const onChangeHandler = (value, event) => {\n    let name = event.target.name;\n    if (error[name]) {\n      delete error[name];\n      setError(error);\n    }\n    updateWidget({ ...widget, [name]: value });\n  };\n\n  const onNextStep = (nextStep) => (event) => {\n    event.preventDefault();\n    if (nextStep === 1) {\n      setStep(nextStep);\n    }\n\n    if (widget.language && widget.language !== \"none\") {\n      setStep(nextStep);\n    } else {\n      setError({ ...error, [\"language\"]: \"Language required for create widget!\" });\n    }\n  };\n\n  const addWidgetHandler = (event) => {\n    event.preventDefault();\n    if (widget.name && widget.name !== \"\") {\n      addWidget(widget);\n    } else {\n      setError({ ...error, [\"name\"]: \"Name required for create widget!\" });\n    }\n  };\n\n  return (\n    <div className=\"modal\">\n      <div className=\"modal-header d-flex\">\n        <h3 className=\"title\">Step {step}</h3>\n        <button className=\"modal-close\" onClick={onCloseModal}>\n          ✕\n        </button>\n      </div>\n      <div className=\"modal-body\">\n        <StepPanel value={step} index={1}>\n          <FirstStep widget={widget} error={error} onChange={onChangeHandler} />\n        </StepPanel>\n        <StepPanel value={step} index={2}>\n          <SecondStep widget={widget} error={error} onChange={onChangeHandler} />\n        </StepPanel>\n      </div>\n      <div className=\"modal-footer d-flex\">\n        {step === 1 && (\n          <button className=\"btn btn-default\" onClick={onNextStep(2)}>\n            Next Step\n          </button>\n        )}\n\n        {step === 2 && (\n          <button className=\"btn btn-default\" onClick={onNextStep(1)}>\n            Back\n          </button>\n        )}\n\n        {step === 2 && (\n          <button data-testid=\"add-btn\" className=\"btn btn-success\" onClick={addWidgetHandler}>\n            Add\n          </button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nStepPanel.propTypes = {\n  // onClose function for close modal\n  onClose: PropTypes.func,\n  // addWidget function for add widget in localStorage\n  addWidget: PropTypes.func,\n};\n\nexport default WidgetModal;\n","import React from \"react\";\n\nconst AlertModal = (props) => {\n  const { onAction, message = \"Are you sure?\" } = props;\n\n  const onActionHandler = (actionName) => (event) => {\n    event.preventDefault();\n    onAction(actionName);\n  };\n  return (\n    <div className=\"modal alert-modal\">\n      <div className=\"modal-body\">\n        <h3 className=\"title\">{message}</h3>\n      </div>\n      <div className=\"modal-footer\">\n        <button className=\"btn btn-default\" onClick={onActionHandler(\"cancel\")}>\n          No\n        </button>\n        <button className=\"btn btn-danger\" onClick={onActionHandler(\"confirm\")}>\n          Yes\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default AlertModal;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst List = (props) => {\n  const { index, widget, onDelete } = props;\n\n  /**\n   * On delete action call delete method from parent component\n   * @param {number} index\n   */\n  const onDeleteHandler = (index) => (event) => {\n    event.preventDefault();\n    onDelete(index);\n  };\n\n  return (\n    <div className=\"widget-list d-flex\" data-testid=\"list-item\">\n      <div className=\"widget-name flex-2\">{widget.name}</div>\n      <div className=\"widget-language flex-2\">{widget.language}</div>\n      <div className=\"widget-list-action flex-1\">\n        <button className=\"btn btn-danger\" onClick={onDeleteHandler(index)}>\n          Delete\n        </button>\n      </div>\n    </div>\n  );\n};\n\nList.propTypes = {\n  index: PropTypes.number,\n  widget: PropTypes.object,\n  onDelete: PropTypes.func,\n};\n\nexport default List;\n","import React from \"react\";\n\nconst EmptyWidget = () => {\n  return (\n    <div className=\"widget-list-empty\">\n      <h3 className=\"title\">Widget list empty</h3>\n      <p className=\"notes\">Please add widget to click add widget button.</p>\n    </div>\n  );\n};\nexport default EmptyWidget;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport List from \"./List\";\nimport EmptyWidget from \"../EmptyWidget\";\n\nconst WidgetLists = (props) => {\n  const { widgets, onDelete } = props;\n\n  const onDeleteHandler = (index) => {\n    onDelete(index);\n  };\n\n  return (\n    <div className=\"widget-lists d-flex\">\n      {widgets.length === 0 && <EmptyWidget />}\n      {widgets.length > 0 &&\n        widgets.map((widget, index) => {\n          return <List widget={widget} index={index} key={index + 1} onDelete={onDeleteHandler} />;\n        })}\n    </div>\n  );\n};\n\nWidgetLists.propTypes = {\n  // All widgets list\n  widgets: PropTypes.array,\n  // Delete with function\n  onDelete: PropTypes.func,\n};\n\nexport default WidgetLists;\n","const insertItem = (widgetList, key = \"_widget_list\") => {\n  localStorage.setItem(key, JSON.stringify(widgetList));\n};\n\nconst getItem = (key = \"_widget_list\") => {\n  const storeItem = localStorage.getItem(key);\n  if (storeItem) return JSON.parse(storeItem);\n  return null;\n};\n\nexport const getWidgets = () => {\n  return getItem();\n};\n\nexport const setWidgets = (widgets) => {\n  insertItem(widgets);\n};\n","import React, { useState, useEffect } from \"react\";\nimport Modal from \"./Components/Modal\";\nimport WidgetModal from \"./Components/WidgetModal\";\nimport AlertModal from \"./Components/AlertModal\";\nimport WidgetLists from \"./Components/WidgetLists\";\nimport { setWidgets, getWidgets } from \"./Store\";\nimport \"./css/widget-main.css\";\n\nconst WidgetOverview = () => {\n  const [open, setOpen] = useState(false);\n  let [widgets, addWidget] = useState([]);\n  let [deleteIndex, setDeleteIndex] = useState(null);\n\n  /**\n   * Load data from localstorage when loading component\n   */\n  useEffect(() => {\n    const _widgets = getWidgets();\n    if (_widgets) {\n      addWidget(_widgets);\n    }\n  }, []);\n\n  /**\n   * Add object to the localstorage and update current state\n   * After add then close modal\n   * @param {object} widget widget object\n   */\n  const onAddWidget = (widget) => {\n    widgets.unshift(widget);\n    addWidget(widgets);\n    setWidgets(widgets);\n    setOpen(false);\n  };\n\n  /**\n   * open modal\n   * @param {object} event\n   */\n  const openModal = (event) => {\n    event.preventDefault();\n    setOpen(true);\n  };\n  /**\n   * Close modal\n   */\n  const onClose = () => {\n    setOpen(false);\n  };\n\n  /**\n   * On delete set widget index number and open alertModal\n   * @param {number} index\n   */\n  const onDeleteHandler = (index) => {\n    setDeleteIndex(index);\n  };\n\n  /**\n   * If actionName confirm then delete the widget and update localstore and state\n   * Set delete index null whatever the action\n   * @param {string} actionName action name (confirm|cancel)\n   */\n  const onAlertActionHandler = (actionName) => {\n    if (actionName === \"confirm\") {\n      widgets.splice(deleteIndex, 1);\n      addWidget(widgets);\n      setWidgets(widgets);\n    }\n    setDeleteIndex(null);\n  };\n\n  return (\n    <div className=\"widget-container\">\n      <div className=\"widget-header d-flex item-center\">\n        <div className=\"widget-title\">\n          <h3 className=\"title\">Widget List</h3>\n        </div>\n        <div className=\"widget-action\">\n          <button className=\"btn btn-default\" onClick={openModal}>\n            Add-Widget\n          </button>\n        </div>\n      </div>\n\n      <WidgetLists widgets={widgets} onDelete={onDeleteHandler} />\n\n      <Modal open={open}>\n        <WidgetModal onClose={onClose} addWidget={onAddWidget} />\n      </Modal>\n      <Modal open={deleteIndex !== null}>\n        <AlertModal onAction={onAlertActionHandler} />\n      </Modal>\n    </div>\n  );\n};\n\nexport default WidgetOverview;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport WidgetOverview from \"./WidgetOverview\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <WidgetOverview />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}